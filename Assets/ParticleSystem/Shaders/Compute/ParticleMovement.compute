#pragma kernel CSMovement

#include "Assets/ParticleSystem/Shaders/Utils/ParticlesUtils.hlsl"

RWStructuredBuffer<ParticleData> _Particles;
uint _ParticleCount;
float _DeltaTime;
float _Time;

[numthreads(64,1,1)]
void CSMovement(uint3 id : SV_DispatchThreadID) {
    if (id.x >= _ParticleCount) return;

    float t = _Time;

    ParticleData particle = _Particles[id.x];

    float3 velocity;
    velocity.x = cos(t) * 5;
    velocity.y = sin(t + id.x);
    velocity.z = sin(t) * 2;

    float3 nextPos = (velocity * _DeltaTime);

    float4x4 translationMatrix = GetTranslationMatrix(nextPos);

    float3 angle = (velocity * _DeltaTime);
    float4x4 rotationMatrix = ComputeRotationMatrix(angle);

    float4x4 transform = mul(mul(particle.mat, rotationMatrix), translationMatrix);

    particle.mat = transform;
    _Particles[id.x] = particle;
}
