#pragma kernel CSMovement

#include "Assets/ParticleSystem/Shaders/Utils/ParticlesUtils.hlsl"

RWStructuredBuffer<ParticleData> particles;

uint num_particle;
float delta_time;
float time;

float3 area;
float3 rotation;
float3 velocity;
float speed;
float max_vel;

[numthreads(64,1,1)]
void CSMovement(uint3 id : SV_DispatchThreadID) {
    if (id.x >= num_particle) return;

    ParticleData particle = particles[id.x];

    float3 vel = particle.velocity + velocity;
    /*
    vel.x += cos(time + id.x);
    vel.y += sin(time + id.x);
    vel.z += cos(time + id.x);
    */
    vel *= speed;

    vel = clamp(vel, -max_vel, max_vel);

    float3 position = particle.position + (vel * delta_time);
    position = clamp(position, -area*0.5, area*0.5);

    float4x4 scaleMatrix = GetScaleMatrix(particle.scale);
    float4x4 translationMatrix = GetTranslationMatrix(position);

    float4x4 baseRotationMatrix = EulerToRotationMatrix(particle.rotation);
    float4x4 offsetRotationMatrix = EulerToRotationMatrix(rotation);
    float4x4 angularRotationMatrix = GetRotationMatrix(vel);
    float4x4 rotationMatrix = mul(mul(baseRotationMatrix, offsetRotationMatrix), angularRotationMatrix);

    particle.position = position;
    particle.velocity = velocity;

    particle.mat = mul(translationMatrix, mul(rotationMatrix, scaleMatrix));

    particles[id.x] = particle;
}
